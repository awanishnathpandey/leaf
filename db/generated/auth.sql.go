// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package generated

import (
	"context"
)

const RegisterUser = `-- name: RegisterUser :one
INSERT INTO users (
  first_name, last_name, email, password
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, first_name, last_name, email, password, job_title, line_of_business, line_manager, email_verified_at, last_seen_at, last_notification_read_at, created_at, updated_at, deleted_at, created_by, updated_by
`

type RegisterUserParams struct {
	FirstName string `db:"first_name" json:"first_name"`
	LastName  string `db:"last_name" json:"last_name"`
	Email     string `db:"email" json:"email"`
	Password  string `db:"password" json:"password"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.db.QueryRow(ctx, RegisterUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.JobTitle,
		&i.LineOfBusiness,
		&i.LineManager,
		&i.EmailVerifiedAt,
		&i.LastSeenAt,
		&i.LastNotificationReadAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const UpdateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
  set password = $2, updated_at = EXTRACT(EPOCH FROM NOW())
WHERE email = $1
`

type UpdateUserPasswordParams struct {
	Email    string `db:"email" json:"email"`
	Password string `db:"password" json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, UpdateUserPassword, arg.Email, arg.Password)
	return err
}
