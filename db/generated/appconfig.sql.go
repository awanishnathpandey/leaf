// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: appconfig.sql

package generated

import (
	"context"
)

const GetAppConfigByKey = `-- name: GetAppConfigByKey :one
SELECT id, config_key, config_data, created_at, updated_at, created_by, updated_by FROM app_config
WHERE config_key = $1
LIMIT 1
`

func (q *Queries) GetAppConfigByKey(ctx context.Context, configKey string) (AppConfig, error) {
	row := q.db.QueryRow(ctx, GetAppConfigByKey, configKey)
	var i AppConfig
	err := row.Scan(
		&i.ID,
		&i.ConfigKey,
		&i.ConfigData,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const UpdateAppConfigByKey = `-- name: UpdateAppConfigByKey :one
UPDATE app_config
SET config_data = $2, updated_at = EXTRACT(EPOCH FROM NOW()), updated_by = $3
WHERE config_key = $1
RETURNING id, config_key, config_data, created_at, updated_at, created_by, updated_by
`

type UpdateAppConfigByKeyParams struct {
	ConfigKey  string `db:"config_key" json:"config_key"`
	ConfigData []byte `db:"config_data" json:"config_data"`
	UpdatedBy  string `db:"updated_by" json:"updated_by"`
}

func (q *Queries) UpdateAppConfigByKey(ctx context.Context, arg UpdateAppConfigByKeyParams) (AppConfig, error) {
	row := q.db.QueryRow(ctx, UpdateAppConfigByKey, arg.ConfigKey, arg.ConfigData, arg.UpdatedBy)
	var i AppConfig
	err := row.Scan(
		&i.ID,
		&i.ConfigKey,
		&i.ConfigData,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
