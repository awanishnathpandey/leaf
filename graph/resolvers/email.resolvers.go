package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	"github.com/awanishnathpandey/leaf/external/mail"
	"github.com/awanishnathpandey/leaf/graph/model"
)

// SendEmail is the resolver for the sendEmail field.
func (r *mutationResolver) SendEmail(ctx context.Context, input model.SendEmailInput) (*model.EmailResponse, error) {
	// Step 1: Validate template name
	templateName := input.TemplateName
	if templateName == "" {
		return nil, fmt.Errorf("template name cannot be empty")
	}
	// Fetch the template from the database
	templateData, err := r.DB.GetEmailTemplateByName(ctx, templateName)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch template: %w", err)
	}

	// Debugging: Log the received input
	// fmt.Printf("Received input: %#v\n", input)

	// Step 3: Render the template with provided data
	renderedTemplate, err := mail.RenderTemplate(templateData.Content, input.Data)
	if err != nil {
		return nil, fmt.Errorf("failed to render template: %w", err)
	}

	// Debugging: Log the rendered template content (optional)
	// fmt.Println("Rendered Template Content:", renderedTemplate)

	// Step 4: Send the email with the rendered template
	err = r.MailService.SendEmail(input.To, "Welcome!", renderedTemplate, input.Data)
	if err != nil {
		return nil, fmt.Errorf("failed to send email: %w", err)
	}

	// Step 5: Return response
	return &model.EmailResponse{
		Success: true,
		Message: "Email sent successfully",
	}, nil
}
