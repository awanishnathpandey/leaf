package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	"github.com/awanishnathpandey/leaf/db/generated"
	"github.com/awanishnathpandey/leaf/graph/model"
	"github.com/awanishnathpandey/leaf/internal/utils"
)

// CreateFolder is the resolver for the createFolder field.
func (r *mutationResolver) CreateFolder(ctx context.Context, input model.CreateFolder) (*model.Folder, error) {
	// Validate input
	if err := input.Validate(); err != nil {
		// Call the reusable validation error formatter
		return nil, utils.FormatValidationErrors(err)
	}

	// Call the generated CreateFolder function with the params
	folder, err := r.DB.CreateFolder(ctx, generated.CreateFolderParams{
		Name:        input.Name,
		Slug:        input.Slug,
		Description: input.Description,
	})
	if err != nil {
		return nil, err
	}

	// Return the newly created folder
	return &model.Folder{
		ID:          folder.ID,
		Name:        folder.Name,
		Slug:        folder.Slug,
		Description: folder.Description,
		CreatedAt:   folder.CreatedAt,
		UpdatedAt:   folder.UpdatedAt,
	}, nil
}

// UpdateFolder is the resolver for the UpdateFolder field.
func (r *mutationResolver) UpdateFolder(ctx context.Context, input model.UpdateFolder) (*model.Folder, error) {
	// Check if the folder exists
	_, err := r.DB.GetFolder(ctx, input.ID)
	if err != nil {
		return nil, fmt.Errorf("folder not found: %w", err)
	}

	// Update the folder
	err = r.DB.UpdateFolder(ctx, generated.UpdateFolderParams{
		ID:          input.ID,
		Name:        input.Name,
		Slug:        input.Slug,
		Description: input.Description,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to update folder: %w", err)
	}

	// Fetch the updated folder
	updatedFolder, err := r.DB.GetFolder(ctx, input.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to retrieve updated folder: %w", err)
	}

	// Map the SQLC model to the GraphQL model
	return &model.Folder{
		ID:          updatedFolder.ID,
		Name:        updatedFolder.Name,
		Slug:        updatedFolder.Slug,
		Description: updatedFolder.Description,
		CreatedAt:   updatedFolder.CreatedAt,
		UpdatedAt:   updatedFolder.UpdatedAt,
	}, nil
}

// DeleteFolder is the resolver for the deleteFolder field.
func (r *mutationResolver) DeleteFolder(ctx context.Context, id int64) (bool, error) {
	// Check if the folder exists (optional)
	_, err := r.DB.GetFolder(ctx, id)
	if err != nil {
		return false, fmt.Errorf("folder not found: %w", err)
	}

	// Attempt to delete the folder
	err = r.DB.DeleteFolder(ctx, id)
	if err != nil {
		return false, fmt.Errorf("failed to delete folder: %w", err)
	}
	return true, nil
}

// Folders is the resolver for the folders field.
func (r *queryResolver) Folders(ctx context.Context) ([]*model.Folder, error) {
	// Fetch folders using sqlc
	rows, err := r.DB.ListFolders(ctx) // Assuming ListFolders is the sqlc query method
	if err != nil {
		return nil, err
	}

	// Map sqlc rows to GraphQL models
	var folders []*model.Folder
	for _, row := range rows {
		folders = append(folders, &model.Folder{
			ID:          row.ID,
			Name:        row.Name,
			Slug:        row.Slug,
			Description: row.Description,
			CreatedAt:   row.CreatedAt, // Or use row.CreatedAt.Time.String()
			UpdatedAt:   row.UpdatedAt, // Or use row.UpdatedAt.Time.String()
		})
	}

	return folders, nil
}

// GetFolder is the resolver for the getFolder field.
func (r *queryResolver) GetFolder(ctx context.Context, id int64) (*model.Folder, error) {
	// Call the generated GetFolder query
	folder, err := r.DB.GetFolder(ctx, id) // assuming input.ID is of type string
	if err != nil {
		return nil, fmt.Errorf("failed to get folder: %w", err)
	}

	// Convert the SQL result to GraphQL model
	return &model.Folder{
		ID:          folder.ID,
		Name:        folder.Name,
		Slug:        folder.Slug,
		Description: folder.Description,
		CreatedAt:   folder.CreatedAt, // assuming you're using timestamptz
		UpdatedAt:   folder.UpdatedAt, // assuming you're using timestamptz
	}, nil
}
