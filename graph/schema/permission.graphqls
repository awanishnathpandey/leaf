# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Role {
    id: ID!
    name: String!
    description: String!
    createdAt: Int!
    updatedAt: Int!
    createdBy: String!
    updatedBy: String!
    permissions(first: Int!, after: Int, filter: PermissionFilter, sort: PermissionSort): PermissionConnection!
    users(first: Int!, after: Int, filter: UserFilter, sort: UserSort): UserConnection!
}

type Permission {
    id: ID!
    name: String!
    description: String!
    createdAt: Int!
    updatedAt: Int!
    createdBy: String!
    updatedBy: String!
    roles(first: Int!, after: Int, filter: RoleFilter, sort: RoleSort): RoleConnection!
}


input CreateRole {
  name: String!
  description: String!
}

input CreatePermission {
  name: String!
  description: String!
}

input UpdateRole {
  id: ID!
  name: String!
  description: String!
}

input UpdatePermission {
  id: ID!
  name: String!
  description: String!
}

# Filters for Roles
input RoleFilter {
  name: String
  description: String
}

# Sorting for Roles
input RoleSort {
  field: RoleSortField!
  order: SortOrder!
}

enum RoleSortField {
  NAME
  DESCRIPTION
}

type RoleConnection {
  totalCount: Int!
  edges: [RoleEdge!]!
  pageInfo: PageInfo!
}

type RoleEdge {
  cursor: String!
  node: Role!
}

# Filters for Permission
input PermissionFilter {
  name: String
  description: String
}

# Sorting for Permissions
input PermissionSort {
  field: PermissionSortField!
  order: SortOrder!
}

enum PermissionSortField {
  NAME
  DESCRIPTION
}

type PermissionConnection {
  totalCount: Int!
  edges: [PermissionEdge!]!
  pageInfo: PageInfo!
}

type PermissionEdge {
  cursor: String!
  node: Permission!
}

extend type Query {
  roles(
    first: Int!
    after: Int
    filter: RoleFilter
    sort: RoleSort
  ): RoleConnection!
  permissions(
    first: Int!
    after: Int
    filter: PermissionFilter
    sort: PermissionSort
  ): PermissionConnection!
  getRole(id: ID!): Role!
  getPermission(id: ID!): Permission!
}

extend type Mutation {
  createRole(input: CreateRole!): Role!
  updateRole(input: UpdateRole!): Role!
  deleteRole(id: ID!): Boolean!
  deleteRoles(ids: [ID!]!): Boolean!
  createPermission(input: CreatePermission!): Permission!
  updatePermission(input: UpdatePermission!): Permission!
  deletePermission(id: ID!): Boolean!
  deletePermissions(ids: [ID!]!): Boolean!
  addRoleToUser(roleId: ID!, userId: ID!): Boolean!
  removeRoleFromUser(roleId: ID!, userId: ID!): Boolean!
  addPermissionToRole(roleId: ID!, permissionId: ID!): Boolean!
  removePermissionFromRole(roleId: ID!, permissionId: ID!): Boolean!
}
