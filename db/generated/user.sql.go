// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package generated

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, email, password
) VALUES (
  $1, $2, $3
)
RETURNING id, name, email, password, email_verified_at, last_seen_at, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.EmailVerifiedAt,
		&i.LastSeenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password, email_verified_at, last_seen_at, created_at, updated_at, deleted_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.EmailVerifiedAt,
		&i.LastSeenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, email_verified_at, last_seen_at, created_at, updated_at, deleted_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.EmailVerifiedAt,
		&i.LastSeenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserID = `-- name: GetUserID :one
SELECT id FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserID(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRow(ctx, getUserID, id)
	err := row.Scan(&id)
	return id, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password, email_verified_at, last_seen_at, created_at, updated_at, deleted_at FROM users
ORDER BY email
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.EmailVerifiedAt,
			&i.LastSeenAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paginatedUsers = `-- name: PaginatedUsers :many
SELECT 
    id, 
    name, 
    email, 
    password, 
    email_verified_at, 
    last_seen_at, 
    created_at, 
    updated_at, 
    deleted_at
FROM users
WHERE 
    (coalesce($3, '') = '' OR name ILIKE '%' || $3 || '%')
    AND (coalesce($4, '') = '' OR email ILIKE '%' || $4 || '%')
ORDER BY 
    CASE 
        WHEN $5 = 'NAME' AND $6 = 'ASC' THEN name 
        WHEN $5 = 'EMAIL' AND $6 = 'ASC' THEN email 
    END ASC,
    CASE 
        WHEN $5 = 'NAME' AND $6 = 'DESC' THEN name 
        WHEN $5 = 'EMAIL' AND $6 = 'DESC' THEN email 
    END DESC
LIMIT $1
OFFSET $2
`

type PaginatedUsersParams struct {
	Limit       int32       `json:"limit"`
	Offset      int32       `json:"offset"`
	NameFilter  interface{} `json:"name_filter"`
	EmailFilter interface{} `json:"email_filter"`
	SortField   interface{} `json:"sort_field"`
	SortOrder   interface{} `json:"sort_order"`
}

func (q *Queries) PaginatedUsers(ctx context.Context, arg PaginatedUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, paginatedUsers,
		arg.Limit,
		arg.Offset,
		arg.NameFilter,
		arg.EmailFilter,
		arg.SortField,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.EmailVerifiedAt,
			&i.LastSeenAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set name = $2, email = $3, updated_at = EXTRACT(EPOCH FROM NOW())
WHERE id = $1
`

type UpdateUserParams struct {
	ID    int64  `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Name, arg.Email)
	return err
}

const updateUserEmailVerifiedAt = `-- name: UpdateUserEmailVerifiedAt :exec
UPDATE users
  set email_verified_at = EXTRACT(EPOCH FROM NOW()), updated_at = EXTRACT(EPOCH FROM NOW())
WHERE id = $1
`

func (q *Queries) UpdateUserEmailVerifiedAt(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateUserEmailVerifiedAt, id)
	return err
}

const updateUserLastSeenAt = `-- name: UpdateUserLastSeenAt :exec
UPDATE users
  set last_seen_at = EXTRACT(EPOCH FROM NOW())
WHERE id = $1
`

func (q *Queries) UpdateUserLastSeenAt(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateUserLastSeenAt, id)
	return err
}
