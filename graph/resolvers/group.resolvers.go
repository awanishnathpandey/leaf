package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	"github.com/awanishnathpandey/leaf/graph/model"
)

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, input model.CreateGroup) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: CreateGroup - createGroup"))
}

// UpdateGroup is the resolver for the updateGroup field.
func (r *mutationResolver) UpdateGroup(ctx context.Context, input model.UpdateGroup) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: UpdateGroup - updateGroup"))
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id int64) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteGroup - deleteGroup"))
}

// AddUserToGroup is the resolver for the addUserToGroup field.
func (r *mutationResolver) AddUserToGroup(ctx context.Context, groupID int64, userID int64) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: AddUserToGroup - addUserToGroup"))
}

// RemoveUserFromGroup is the resolver for the removeUserFromGroup field.
func (r *mutationResolver) RemoveUserFromGroup(ctx context.Context, groupID int64, userID int64) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: RemoveUserFromGroup - removeUserFromGroup"))
}

// AddFolderToGroup is the resolver for the addFolderToGroup field.
func (r *mutationResolver) AddFolderToGroup(ctx context.Context, groupID int64, folderID int64) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: AddFolderToGroup - addFolderToGroup"))
}

// RemoveFolderFromGroup is the resolver for the removeFolderFromGroup field.
func (r *mutationResolver) RemoveFolderFromGroup(ctx context.Context, groupID int64, folderID int64) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: RemoveFolderFromGroup - removeFolderFromGroup"))
}

// AddFileToGroup is the resolver for the addFileToGroup field.
func (r *mutationResolver) AddFileToGroup(ctx context.Context, groupID int64, fileID int64) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: AddFileToGroup - addFileToGroup"))
}

// RemoveFileFromGroup is the resolver for the removeFileFromGroup field.
func (r *mutationResolver) RemoveFileFromGroup(ctx context.Context, groupID int64, fileID int64) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: RemoveFileFromGroup - removeFileFromGroup"))
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context) ([]*model.Group, error) {
	panic(fmt.Errorf("not implemented: Groups - groups"))
}

// GetGroup is the resolver for the getGroup field.
func (r *queryResolver) GetGroup(ctx context.Context, id int64) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: GetGroup - getGroup"))
}

// GetGroupUsers is the resolver for the getGroupUsers field.
func (r *queryResolver) GetGroupUsers(ctx context.Context, id int64) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: GetGroupUsers - getGroupUsers"))
}

// GetGroupFolders is the resolver for the getGroupFolders field.
func (r *queryResolver) GetGroupFolders(ctx context.Context, id int64) ([]*model.Folder, error) {
	panic(fmt.Errorf("not implemented: GetGroupFolders - getGroupFolders"))
}

// GetGroupFiles is the resolver for the getGroupFiles field.
func (r *queryResolver) GetGroupFiles(ctx context.Context, id int64) ([]*model.File, error) {
	panic(fmt.Errorf("not implemented: GetGroupFiles - getGroupFiles"))
}
