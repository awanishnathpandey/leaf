// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addFileToGroup = `-- name: AddFileToGroup :exec
INSERT INTO group_files (group_id, file_id, created_at, updated_at) 
VALUES ($1, $2, EXTRACT(EPOCH FROM NOW()), EXTRACT(EPOCH FROM NOW())) 
ON CONFLICT DO NOTHING
`

type AddFileToGroupParams struct {
	GroupID int64 `json:"group_id"`
	FileID  int64 `json:"file_id"`
}

func (q *Queries) AddFileToGroup(ctx context.Context, arg AddFileToGroupParams) error {
	_, err := q.db.Exec(ctx, addFileToGroup, arg.GroupID, arg.FileID)
	return err
}

const addFolderToGroup = `-- name: AddFolderToGroup :exec
INSERT INTO group_folders (group_id, folder_id, created_at, updated_at) 
VALUES ($1, $2, EXTRACT(EPOCH FROM NOW()), EXTRACT(EPOCH FROM NOW())) 
ON CONFLICT DO NOTHING
`

type AddFolderToGroupParams struct {
	GroupID  int64 `json:"group_id"`
	FolderID int64 `json:"folder_id"`
}

func (q *Queries) AddFolderToGroup(ctx context.Context, arg AddFolderToGroupParams) error {
	_, err := q.db.Exec(ctx, addFolderToGroup, arg.GroupID, arg.FolderID)
	return err
}

const addUserToGroup = `-- name: AddUserToGroup :exec
INSERT INTO group_users (group_id, user_id, created_at, updated_at) 
VALUES ($1, $2, EXTRACT(EPOCH FROM NOW()), EXTRACT(EPOCH FROM NOW())) 
ON CONFLICT DO NOTHING
`

type AddUserToGroupParams struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) error {
	_, err := q.db.Exec(ctx, addUserToGroup, arg.GroupID, arg.UserID)
	return err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (name, description, created_by, updated_by) 
VALUES ($1, $2, $3, $3) 
RETURNING id, name, description, created_at, updated_at, created_by, updated_by
`

type CreateGroupParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	CreatedBy   string `json:"created_by"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, arg.Name, arg.Description, arg.CreatedBy)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups 
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteGroup, id)
	return err
}

const deleteGroupsByIDs = `-- name: DeleteGroupsByIDs :exec
DELETE FROM groups
WHERE id = ANY($1::bigint[])
`

func (q *Queries) DeleteGroupsByIDs(ctx context.Context, dollar_1 []int64) error {
	_, err := q.db.Exec(ctx, deleteGroupsByIDs, dollar_1)
	return err
}

const getFilesByGroupID = `-- name: GetFilesByGroupID :many
SELECT f.id, f.name, f.slug, f.file_path, f.file_type, f.file_bytes, f.auto_download, f.folder_id, f.created_at, f.updated_at, f.created_by, f.updated_by
FROM files f
JOIN group_files gf ON f.id = gf.file_id
WHERE gf.group_id = $1
`

func (q *Queries) GetFilesByGroupID(ctx context.Context, groupID int64) ([]File, error) {
	rows, err := q.db.Query(ctx, getFilesByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.FilePath,
			&i.FileType,
			&i.FileBytes,
			&i.AutoDownload,
			&i.FolderID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFoldersByGroupID = `-- name: GetFoldersByGroupID :many
SELECT f.id, f.name, f.slug, f.description, f.created_at, f.updated_at, f.created_by, f.updated_by
FROM folders f
JOIN group_folders gf ON f.id = gf.folder_id
WHERE gf.group_id = $1
`

func (q *Queries) GetFoldersByGroupID(ctx context.Context, groupID int64) ([]Folder, error) {
	rows, err := q.db.Query(ctx, getFoldersByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Folder
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroup = `-- name: GetGroup :one
SELECT id, name, description, created_at, updated_at 
FROM groups 
WHERE id = $1
`

type GetGroupRow struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	CreatedAt   int64  `json:"created_at"`
	UpdatedAt   int64  `json:"updated_at"`
}

func (q *Queries) GetGroup(ctx context.Context, id int64) (GetGroupRow, error) {
	row := q.db.QueryRow(ctx, getGroup, id)
	var i GetGroupRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGroupsByFileID = `-- name: GetGroupsByFileID :many
SELECT g.id, g.name, g.description, g.created_at, g.updated_at, g.created_by, g.updated_by
FROM groups g
JOIN group_files gf ON g.id = gf.group_id
WHERE gf.file_id = $1
`

func (q *Queries) GetGroupsByFileID(ctx context.Context, fileID int64) ([]Group, error) {
	rows, err := q.db.Query(ctx, getGroupsByFileID, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupsByFolderID = `-- name: GetGroupsByFolderID :many
SELECT g.id, g.name, g.description, g.created_at, g.updated_at, g.created_by, g.updated_by
FROM groups g
JOIN group_folders gf ON g.id = gf.group_id
WHERE gf.folder_id = $1
`

func (q *Queries) GetGroupsByFolderID(ctx context.Context, folderID int64) ([]Group, error) {
	rows, err := q.db.Query(ctx, getGroupsByFolderID, folderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupsByIDs = `-- name: GetGroupsByIDs :many
SELECT id FROM groups
WHERE id = ANY($1::bigint[])
`

func (q *Queries) GetGroupsByIDs(ctx context.Context, dollar_1 []int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, getGroupsByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupsByUserID = `-- name: GetGroupsByUserID :many
SELECT g.id, g.name, g.description, g.created_at, g.updated_at, g.created_by, g.updated_by
FROM groups g
JOIN group_users gu ON g.id = gu.group_id
WHERE gu.user_id = $1
`

func (q *Queries) GetGroupsByUserID(ctx context.Context, userID int64) ([]Group, error) {
	rows, err := q.db.Query(ctx, getGroupsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedFilesByGroupID = `-- name: GetPaginatedFilesByGroupID :many
SELECT id, name, slug, file_path, file_type, file_bytes, auto_download, folder_id, f.created_at, f.updated_at, f.created_by, f.updated_by, group_id, file_id, gf.created_at, gf.updated_at, gf.created_by, gf.updated_by FROM files f
JOIN group_files gf ON f.id = gf.file_id
WHERE 
    gf.group_id = $3  -- Filter by group_id
    AND (coalesce($4, '') = '' OR f.name ILIKE '%' || $4 || '%')
    AND (coalesce($5, '') = '' OR f.slug ILIKE '%' || $5 || '%')
ORDER BY 
    CASE 
        WHEN $6 = 'NAME' AND $7 = 'ASC' THEN f.name 
        WHEN $6 = 'SLUG' AND $7 = 'ASC' THEN f.slug 
    END ASC,
    CASE 
        WHEN $6 = 'NAME' AND $7 = 'DESC' THEN f.name 
        WHEN $6 = 'SLUG' AND $7 = 'DESC' THEN f.slug 
    END DESC
LIMIT $1
OFFSET $2
`

type GetPaginatedFilesByGroupIDParams struct {
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
	GroupID    pgtype.Int8 `json:"group_id"`
	NameFilter interface{} `json:"name_filter"`
	SlugFilter interface{} `json:"slug_filter"`
	SortField  interface{} `json:"sort_field"`
	SortOrder  interface{} `json:"sort_order"`
}

type GetPaginatedFilesByGroupIDRow struct {
	ID           int64  `json:"id"`
	Name         string `json:"name"`
	Slug         string `json:"slug"`
	FilePath     string `json:"file_path"`
	FileType     string `json:"file_type"`
	FileBytes    int64  `json:"file_bytes"`
	AutoDownload bool   `json:"auto_download"`
	FolderID     int64  `json:"folder_id"`
	CreatedAt    int64  `json:"created_at"`
	UpdatedAt    int64  `json:"updated_at"`
	CreatedBy    string `json:"created_by"`
	UpdatedBy    string `json:"updated_by"`
	GroupID      int64  `json:"group_id"`
	FileID       int64  `json:"file_id"`
	CreatedAt_2  int64  `json:"created_at_2"`
	UpdatedAt_2  int64  `json:"updated_at_2"`
	CreatedBy_2  string `json:"created_by_2"`
	UpdatedBy_2  string `json:"updated_by_2"`
}

func (q *Queries) GetPaginatedFilesByGroupID(ctx context.Context, arg GetPaginatedFilesByGroupIDParams) ([]GetPaginatedFilesByGroupIDRow, error) {
	rows, err := q.db.Query(ctx, getPaginatedFilesByGroupID,
		arg.Limit,
		arg.Offset,
		arg.GroupID,
		arg.NameFilter,
		arg.SlugFilter,
		arg.SortField,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaginatedFilesByGroupIDRow
	for rows.Next() {
		var i GetPaginatedFilesByGroupIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.FilePath,
			&i.FileType,
			&i.FileBytes,
			&i.AutoDownload,
			&i.FolderID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.GroupID,
			&i.FileID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.CreatedBy_2,
			&i.UpdatedBy_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedFilesByGroupIDCount = `-- name: GetPaginatedFilesByGroupIDCount :one
SELECT COUNT(*) FROM files f
JOIN group_files gf ON f.id = gf.file_id
WHERE 
    gf.group_id = $1  -- Filter by group_id
    AND (coalesce($2, '') = '' OR f.name ILIKE '%' || $2 || '%')
    AND (coalesce($3, '') = '' OR f.slug ILIKE '%' || $3 || '%')
`

type GetPaginatedFilesByGroupIDCountParams struct {
	GroupID    pgtype.Int8 `json:"group_id"`
	NameFilter interface{} `json:"name_filter"`
	SlugFilter interface{} `json:"slug_filter"`
}

func (q *Queries) GetPaginatedFilesByGroupIDCount(ctx context.Context, arg GetPaginatedFilesByGroupIDCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getPaginatedFilesByGroupIDCount, arg.GroupID, arg.NameFilter, arg.SlugFilter)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPaginatedFoldersByGroupID = `-- name: GetPaginatedFoldersByGroupID :many
SELECT id, name, slug, description, f.created_at, f.updated_at, f.created_by, f.updated_by, group_id, folder_id, gf.created_at, gf.updated_at, gf.created_by, gf.updated_by FROM folders f
JOIN group_folders gf ON f.id = gf.folder_id
WHERE 
    gf.group_id = $3  -- Filter by group_id
    AND (coalesce($4, '') = '' OR f.name ILIKE '%' || $4 || '%')
    AND (coalesce($5, '') = '' OR f.slug ILIKE '%' || $5 || '%')
    AND (coalesce($6, '') = '' OR f.description ILIKE '%' || $6 || '%')
ORDER BY 
    CASE 
        WHEN $7 = 'NAME' AND $8 = 'ASC' THEN f.name 
        WHEN $7 = 'SLUG' AND $8 = 'ASC' THEN f.slug 
        WHEN $7 = 'DESCRIPTION' AND $8 = 'ASC' THEN f.description 
    END ASC,
    CASE 
        WHEN $7 = 'NAME' AND $8 = 'DESC' THEN f.name 
        WHEN $7 = 'SLUG' AND $8 = 'DESC' THEN f.slug 
        WHEN $7 = 'DESCRIPTION' AND $8 = 'DESC' THEN f.description 
    END DESC
LIMIT $1
OFFSET $2
`

type GetPaginatedFoldersByGroupIDParams struct {
	Limit             int32       `json:"limit"`
	Offset            int32       `json:"offset"`
	GroupID           pgtype.Int8 `json:"group_id"`
	NameFilter        interface{} `json:"name_filter"`
	SlugFilter        interface{} `json:"slug_filter"`
	DescriptionFilter interface{} `json:"description_filter"`
	SortField         interface{} `json:"sort_field"`
	SortOrder         interface{} `json:"sort_order"`
}

type GetPaginatedFoldersByGroupIDRow struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Slug        string `json:"slug"`
	Description string `json:"description"`
	CreatedAt   int64  `json:"created_at"`
	UpdatedAt   int64  `json:"updated_at"`
	CreatedBy   string `json:"created_by"`
	UpdatedBy   string `json:"updated_by"`
	GroupID     int64  `json:"group_id"`
	FolderID    int64  `json:"folder_id"`
	CreatedAt_2 int64  `json:"created_at_2"`
	UpdatedAt_2 int64  `json:"updated_at_2"`
	CreatedBy_2 string `json:"created_by_2"`
	UpdatedBy_2 string `json:"updated_by_2"`
}

func (q *Queries) GetPaginatedFoldersByGroupID(ctx context.Context, arg GetPaginatedFoldersByGroupIDParams) ([]GetPaginatedFoldersByGroupIDRow, error) {
	rows, err := q.db.Query(ctx, getPaginatedFoldersByGroupID,
		arg.Limit,
		arg.Offset,
		arg.GroupID,
		arg.NameFilter,
		arg.SlugFilter,
		arg.DescriptionFilter,
		arg.SortField,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaginatedFoldersByGroupIDRow
	for rows.Next() {
		var i GetPaginatedFoldersByGroupIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.GroupID,
			&i.FolderID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.CreatedBy_2,
			&i.UpdatedBy_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedFoldersByGroupIDCount = `-- name: GetPaginatedFoldersByGroupIDCount :one
SELECT COUNT(*) FROM folders f
JOIN group_folders gf ON f.id = gf.folder_id
WHERE 
    gf.group_id = $1  -- Filter by group_id
    AND (coalesce($2, '') = '' OR f.name ILIKE '%' || $2 || '%')
    AND (coalesce($3, '') = '' OR f.slug ILIKE '%' || $3 || '%')
    AND (coalesce($4, '') = '' OR f.description ILIKE '%' || $4 || '%')
`

type GetPaginatedFoldersByGroupIDCountParams struct {
	GroupID           pgtype.Int8 `json:"group_id"`
	NameFilter        interface{} `json:"name_filter"`
	SlugFilter        interface{} `json:"slug_filter"`
	DescriptionFilter interface{} `json:"description_filter"`
}

func (q *Queries) GetPaginatedFoldersByGroupIDCount(ctx context.Context, arg GetPaginatedFoldersByGroupIDCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getPaginatedFoldersByGroupIDCount,
		arg.GroupID,
		arg.NameFilter,
		arg.SlugFilter,
		arg.DescriptionFilter,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPaginatedGroupsByFileID = `-- name: GetPaginatedGroupsByFileID :many
SELECT id, name, description, g.created_at, g.updated_at, g.created_by, g.updated_by, group_id, file_id, gf.created_at, gf.updated_at, gf.created_by, gf.updated_by FROM groups g
JOIN group_files gf ON g.id = gf.group_id
WHERE 
    gf.file_id = $3  -- Filter by user_id
    AND (coalesce($4, '') = '' OR g.name ILIKE '%' || $4 || '%')
    AND (coalesce($5, '') = '' OR g.description ILIKE '%' || $5 || '%')
ORDER BY 
    CASE 
        WHEN $6 = 'NAME' AND $7 = 'ASC' THEN g.name 
        WHEN $6 = 'DESCRIPTION' AND $7 = 'ASC' THEN g.description 
    END ASC,
    CASE 
        WHEN $6 = 'NAME' AND $7 = 'DESC' THEN g.name 
        WHEN $6 = 'DESCRIPTION' AND $7 = 'DESC' THEN g.description 
    END DESC
LIMIT $1
OFFSET $2
`

type GetPaginatedGroupsByFileIDParams struct {
	Limit             int32       `json:"limit"`
	Offset            int32       `json:"offset"`
	FileID            pgtype.Int8 `json:"file_id"`
	NameFilter        interface{} `json:"name_filter"`
	DescriptionFilter interface{} `json:"description_filter"`
	SortField         interface{} `json:"sort_field"`
	SortOrder         interface{} `json:"sort_order"`
}

type GetPaginatedGroupsByFileIDRow struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	CreatedAt   int64  `json:"created_at"`
	UpdatedAt   int64  `json:"updated_at"`
	CreatedBy   string `json:"created_by"`
	UpdatedBy   string `json:"updated_by"`
	GroupID     int64  `json:"group_id"`
	FileID      int64  `json:"file_id"`
	CreatedAt_2 int64  `json:"created_at_2"`
	UpdatedAt_2 int64  `json:"updated_at_2"`
	CreatedBy_2 string `json:"created_by_2"`
	UpdatedBy_2 string `json:"updated_by_2"`
}

func (q *Queries) GetPaginatedGroupsByFileID(ctx context.Context, arg GetPaginatedGroupsByFileIDParams) ([]GetPaginatedGroupsByFileIDRow, error) {
	rows, err := q.db.Query(ctx, getPaginatedGroupsByFileID,
		arg.Limit,
		arg.Offset,
		arg.FileID,
		arg.NameFilter,
		arg.DescriptionFilter,
		arg.SortField,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaginatedGroupsByFileIDRow
	for rows.Next() {
		var i GetPaginatedGroupsByFileIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.GroupID,
			&i.FileID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.CreatedBy_2,
			&i.UpdatedBy_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedGroupsByFileIDCount = `-- name: GetPaginatedGroupsByFileIDCount :one
SELECT COUNT(*) FROM groups g
JOIN group_files gf ON g.id = gf.group_id
WHERE 
    gf.file_id = $1  -- Filter by user_id
    AND (coalesce($2, '') = '' OR g.name ILIKE '%' || $2 || '%')
    AND (coalesce($3, '') = '' OR g.description ILIKE '%' || $3 || '%')
`

type GetPaginatedGroupsByFileIDCountParams struct {
	FileID            pgtype.Int8 `json:"file_id"`
	NameFilter        interface{} `json:"name_filter"`
	DescriptionFilter interface{} `json:"description_filter"`
}

func (q *Queries) GetPaginatedGroupsByFileIDCount(ctx context.Context, arg GetPaginatedGroupsByFileIDCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getPaginatedGroupsByFileIDCount, arg.FileID, arg.NameFilter, arg.DescriptionFilter)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPaginatedGroupsByFolderID = `-- name: GetPaginatedGroupsByFolderID :many
SELECT id, name, description, g.created_at, g.updated_at, g.created_by, g.updated_by, group_id, folder_id, gf.created_at, gf.updated_at, gf.created_by, gf.updated_by FROM groups g
JOIN group_folders gf ON g.id = gf.group_id
WHERE 
    gf.folder_id = $3  -- Filter by folder_id
    AND (coalesce($4, '') = '' OR g.name ILIKE '%' || $4 || '%')
    AND (coalesce($5, '') = '' OR g.description ILIKE '%' || $5 || '%')
ORDER BY 
    CASE 
        WHEN $6 = 'NAME' AND $7 = 'ASC' THEN g.name 
        WHEN $6 = 'DESCRIPTION' AND $7 = 'ASC' THEN g.description 
    END ASC,
    CASE 
        WHEN $6 = 'NAME' AND $7 = 'DESC' THEN g.name 
        WHEN $6 = 'DESCRIPTION' AND $7 = 'DESC' THEN g.description 
    END DESC
LIMIT $1
OFFSET $2
`

type GetPaginatedGroupsByFolderIDParams struct {
	Limit             int32       `json:"limit"`
	Offset            int32       `json:"offset"`
	FolderID          pgtype.Int8 `json:"folder_id"`
	NameFilter        interface{} `json:"name_filter"`
	DescriptionFilter interface{} `json:"description_filter"`
	SortField         interface{} `json:"sort_field"`
	SortOrder         interface{} `json:"sort_order"`
}

type GetPaginatedGroupsByFolderIDRow struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	CreatedAt   int64  `json:"created_at"`
	UpdatedAt   int64  `json:"updated_at"`
	CreatedBy   string `json:"created_by"`
	UpdatedBy   string `json:"updated_by"`
	GroupID     int64  `json:"group_id"`
	FolderID    int64  `json:"folder_id"`
	CreatedAt_2 int64  `json:"created_at_2"`
	UpdatedAt_2 int64  `json:"updated_at_2"`
	CreatedBy_2 string `json:"created_by_2"`
	UpdatedBy_2 string `json:"updated_by_2"`
}

func (q *Queries) GetPaginatedGroupsByFolderID(ctx context.Context, arg GetPaginatedGroupsByFolderIDParams) ([]GetPaginatedGroupsByFolderIDRow, error) {
	rows, err := q.db.Query(ctx, getPaginatedGroupsByFolderID,
		arg.Limit,
		arg.Offset,
		arg.FolderID,
		arg.NameFilter,
		arg.DescriptionFilter,
		arg.SortField,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaginatedGroupsByFolderIDRow
	for rows.Next() {
		var i GetPaginatedGroupsByFolderIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.GroupID,
			&i.FolderID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.CreatedBy_2,
			&i.UpdatedBy_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedGroupsByFolderIDCount = `-- name: GetPaginatedGroupsByFolderIDCount :one
SELECT COUNT(*) FROM groups g
JOIN group_folders gf ON g.id = gf.group_id
WHERE 
    gf.folder_id = $1  -- Filter by folder_id
    AND (coalesce($2, '') = '' OR g.name ILIKE '%' || $2 || '%')
    AND (coalesce($3, '') = '' OR g.description ILIKE '%' || $3 || '%')
`

type GetPaginatedGroupsByFolderIDCountParams struct {
	FolderID          pgtype.Int8 `json:"folder_id"`
	NameFilter        interface{} `json:"name_filter"`
	DescriptionFilter interface{} `json:"description_filter"`
}

func (q *Queries) GetPaginatedGroupsByFolderIDCount(ctx context.Context, arg GetPaginatedGroupsByFolderIDCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getPaginatedGroupsByFolderIDCount, arg.FolderID, arg.NameFilter, arg.DescriptionFilter)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPaginatedGroupsByUserID = `-- name: GetPaginatedGroupsByUserID :many
SELECT id, name, description, g.created_at, g.updated_at, g.created_by, g.updated_by, group_id, user_id, gu.created_at, gu.updated_at, gu.created_by, gu.updated_by FROM groups g
JOIN group_users gu ON g.id = gu.group_id
WHERE 
    gu.user_id = $3  -- Filter by user_id
    AND (coalesce($4, '') = '' OR g.name ILIKE '%' || $4 || '%')
    AND (coalesce($5, '') = '' OR g.description ILIKE '%' || $5 || '%')
ORDER BY 
    CASE 
        WHEN $6 = 'NAME' AND $7 = 'ASC' THEN g.name 
        WHEN $6 = 'DESCRIPTION' AND $7 = 'ASC' THEN g.description 
    END ASC,
    CASE 
        WHEN $6 = 'NAME' AND $7 = 'DESC' THEN g.name 
        WHEN $6 = 'DESCRIPTION' AND $7 = 'DESC' THEN g.description 
    END DESC
LIMIT $1
OFFSET $2
`

type GetPaginatedGroupsByUserIDParams struct {
	Limit             int32       `json:"limit"`
	Offset            int32       `json:"offset"`
	UserID            pgtype.Int8 `json:"user_id"`
	NameFilter        interface{} `json:"name_filter"`
	DescriptionFilter interface{} `json:"description_filter"`
	SortField         interface{} `json:"sort_field"`
	SortOrder         interface{} `json:"sort_order"`
}

type GetPaginatedGroupsByUserIDRow struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	CreatedAt   int64  `json:"created_at"`
	UpdatedAt   int64  `json:"updated_at"`
	CreatedBy   string `json:"created_by"`
	UpdatedBy   string `json:"updated_by"`
	GroupID     int64  `json:"group_id"`
	UserID      int64  `json:"user_id"`
	CreatedAt_2 int64  `json:"created_at_2"`
	UpdatedAt_2 int64  `json:"updated_at_2"`
	CreatedBy_2 string `json:"created_by_2"`
	UpdatedBy_2 string `json:"updated_by_2"`
}

func (q *Queries) GetPaginatedGroupsByUserID(ctx context.Context, arg GetPaginatedGroupsByUserIDParams) ([]GetPaginatedGroupsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getPaginatedGroupsByUserID,
		arg.Limit,
		arg.Offset,
		arg.UserID,
		arg.NameFilter,
		arg.DescriptionFilter,
		arg.SortField,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaginatedGroupsByUserIDRow
	for rows.Next() {
		var i GetPaginatedGroupsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.GroupID,
			&i.UserID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.CreatedBy_2,
			&i.UpdatedBy_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedGroupsByUserIDCount = `-- name: GetPaginatedGroupsByUserIDCount :one
SELECT COUNT(*) FROM groups g
JOIN group_users gu ON g.id = gu.group_id
WHERE 
    gu.user_id = $1  -- Filter by user_id
    AND (coalesce($2, '') = '' OR g.name ILIKE '%' || $2 || '%')
    AND (coalesce($3, '') = '' OR g.description ILIKE '%' || $3 || '%')
`

type GetPaginatedGroupsByUserIDCountParams struct {
	UserID            pgtype.Int8 `json:"user_id"`
	NameFilter        interface{} `json:"name_filter"`
	DescriptionFilter interface{} `json:"description_filter"`
}

func (q *Queries) GetPaginatedGroupsByUserIDCount(ctx context.Context, arg GetPaginatedGroupsByUserIDCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getPaginatedGroupsByUserIDCount, arg.UserID, arg.NameFilter, arg.DescriptionFilter)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPaginatedUsersByGroupID = `-- name: GetPaginatedUsersByGroupID :many
SELECT 
    u.id, 
    u.first_name,
    u.last_name, 
    u.email,
    u.job_title,
    u.line_of_business,
    u.line_manager, 
    u.email_verified_at, 
    u.last_seen_at, 
    u.created_at, 
    u.updated_at, 
    u.deleted_at,
    u.created_by,
    u.updated_by
FROM users u
JOIN group_users gu ON u.id = gu.user_id
WHERE 
    gu.group_id = $3  -- Filter by group_id
    AND (coalesce($4, '') = '' OR u.first_name ILIKE '%' || $4 || '%')
    AND (coalesce($5, '') = '' OR u.email ILIKE '%' || $5 || '%')
ORDER BY 
    CASE 
        WHEN $6 = 'NAME' AND $7 = 'ASC' THEN u.first_name 
        WHEN $6 = 'EMAIL' AND $7 = 'ASC' THEN u.email 
    END ASC,
    CASE 
        WHEN $6 = 'NAME' AND $7 = 'DESC' THEN u.first_name 
        WHEN $6 = 'EMAIL' AND $7 = 'DESC' THEN u.email 
    END DESC
LIMIT $1
OFFSET $2
`

type GetPaginatedUsersByGroupIDParams struct {
	Limit       int32       `json:"limit"`
	Offset      int32       `json:"offset"`
	GroupID     pgtype.Int8 `json:"group_id"`
	NameFilter  interface{} `json:"name_filter"`
	EmailFilter interface{} `json:"email_filter"`
	SortField   interface{} `json:"sort_field"`
	SortOrder   interface{} `json:"sort_order"`
}

type GetPaginatedUsersByGroupIDRow struct {
	ID              int64       `json:"id"`
	FirstName       string      `json:"first_name"`
	LastName        string      `json:"last_name"`
	Email           string      `json:"email"`
	JobTitle        pgtype.Text `json:"job_title"`
	LineOfBusiness  pgtype.Text `json:"line_of_business"`
	LineManager     pgtype.Text `json:"line_manager"`
	EmailVerifiedAt pgtype.Int8 `json:"email_verified_at"`
	LastSeenAt      int64       `json:"last_seen_at"`
	CreatedAt       int64       `json:"created_at"`
	UpdatedAt       int64       `json:"updated_at"`
	DeletedAt       pgtype.Int8 `json:"deleted_at"`
	CreatedBy       string      `json:"created_by"`
	UpdatedBy       string      `json:"updated_by"`
}

func (q *Queries) GetPaginatedUsersByGroupID(ctx context.Context, arg GetPaginatedUsersByGroupIDParams) ([]GetPaginatedUsersByGroupIDRow, error) {
	rows, err := q.db.Query(ctx, getPaginatedUsersByGroupID,
		arg.Limit,
		arg.Offset,
		arg.GroupID,
		arg.NameFilter,
		arg.EmailFilter,
		arg.SortField,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaginatedUsersByGroupIDRow
	for rows.Next() {
		var i GetPaginatedUsersByGroupIDRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.JobTitle,
			&i.LineOfBusiness,
			&i.LineManager,
			&i.EmailVerifiedAt,
			&i.LastSeenAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedUsersByGroupIDCount = `-- name: GetPaginatedUsersByGroupIDCount :one
SELECT COUNT(*) FROM users u
JOIN group_users gu ON u.id = gu.user_id
WHERE 
    gu.group_id = $1  -- Filter by group_id
    AND (coalesce($2, '') = '' OR u.first_name ILIKE '%' || $2 || '%')
    AND (coalesce($3, '') = '' OR u.email ILIKE '%' || $3 || '%')
`

type GetPaginatedUsersByGroupIDCountParams struct {
	GroupID     pgtype.Int8 `json:"group_id"`
	NameFilter  interface{} `json:"name_filter"`
	EmailFilter interface{} `json:"email_filter"`
}

func (q *Queries) GetPaginatedUsersByGroupIDCount(ctx context.Context, arg GetPaginatedUsersByGroupIDCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getPaginatedUsersByGroupIDCount, arg.GroupID, arg.NameFilter, arg.EmailFilter)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUsersByGroupID = `-- name: GetUsersByGroupID :many
SELECT u.id, u.first_name, u.last_name, u.email, u.job_title, u.line_of_business, u.line_manager, u.email_verified_at, u.last_seen_at, u.created_at, u.updated_at, u.deleted_at
FROM users u
JOIN group_users gu ON u.id = gu.user_id
WHERE gu.group_id = $1
`

type GetUsersByGroupIDRow struct {
	ID              int64       `json:"id"`
	FirstName       string      `json:"first_name"`
	LastName        string      `json:"last_name"`
	Email           string      `json:"email"`
	JobTitle        pgtype.Text `json:"job_title"`
	LineOfBusiness  pgtype.Text `json:"line_of_business"`
	LineManager     pgtype.Text `json:"line_manager"`
	EmailVerifiedAt pgtype.Int8 `json:"email_verified_at"`
	LastSeenAt      int64       `json:"last_seen_at"`
	CreatedAt       int64       `json:"created_at"`
	UpdatedAt       int64       `json:"updated_at"`
	DeletedAt       pgtype.Int8 `json:"deleted_at"`
}

func (q *Queries) GetUsersByGroupID(ctx context.Context, groupID int64) ([]GetUsersByGroupIDRow, error) {
	rows, err := q.db.Query(ctx, getUsersByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByGroupIDRow
	for rows.Next() {
		var i GetUsersByGroupIDRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.JobTitle,
			&i.LineOfBusiness,
			&i.LineManager,
			&i.EmailVerifiedAt,
			&i.LastSeenAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroups = `-- name: ListGroups :many
SELECT id, name, description, created_at, updated_at, created_by, updated_by FROM groups
ORDER BY name
`

func (q *Queries) ListGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.Query(ctx, listGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paginatedGroups = `-- name: PaginatedGroups :many
SELECT id, name, description, created_at, updated_at, created_by, updated_by FROM groups
WHERE 
    (coalesce($3, '') = '' OR name ILIKE '%' || $3 || '%')
    AND (coalesce($4, '') = '' OR description ILIKE '%' || $4 || '%')
ORDER BY 
    CASE 
        WHEN $5 = 'NAME' AND $6 = 'ASC' THEN name 
        WHEN $5 = 'DESCRIPTION' AND $6 = 'ASC' THEN description 
    END ASC,
    CASE 
        WHEN $5 = 'NAME' AND $6 = 'DESC' THEN name 
        WHEN $5 = 'DESCRIPTION' AND $6 = 'DESC' THEN description 
    END DESC
LIMIT $1
OFFSET $2
`

type PaginatedGroupsParams struct {
	Limit             int32       `json:"limit"`
	Offset            int32       `json:"offset"`
	NameFilter        interface{} `json:"name_filter"`
	DescriptionFilter interface{} `json:"description_filter"`
	SortField         interface{} `json:"sort_field"`
	SortOrder         interface{} `json:"sort_order"`
}

func (q *Queries) PaginatedGroups(ctx context.Context, arg PaginatedGroupsParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, paginatedGroups,
		arg.Limit,
		arg.Offset,
		arg.NameFilter,
		arg.DescriptionFilter,
		arg.SortField,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paginatedGroupsCount = `-- name: PaginatedGroupsCount :one
SELECT COUNT(*) FROM groups
WHERE 
    (coalesce($1, '') = '' OR name ILIKE '%' || $1 || '%')
    AND (coalesce($2, '') = '' OR description ILIKE '%' || $2 || '%')
`

type PaginatedGroupsCountParams struct {
	NameFilter        interface{} `json:"name_filter"`
	DescriptionFilter interface{} `json:"description_filter"`
}

func (q *Queries) PaginatedGroupsCount(ctx context.Context, arg PaginatedGroupsCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, paginatedGroupsCount, arg.NameFilter, arg.DescriptionFilter)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const removeFileFromGroup = `-- name: RemoveFileFromGroup :exec
DELETE FROM group_files 
WHERE group_id = $1 AND file_id = $2
`

type RemoveFileFromGroupParams struct {
	GroupID int64 `json:"group_id"`
	FileID  int64 `json:"file_id"`
}

func (q *Queries) RemoveFileFromGroup(ctx context.Context, arg RemoveFileFromGroupParams) error {
	_, err := q.db.Exec(ctx, removeFileFromGroup, arg.GroupID, arg.FileID)
	return err
}

const removeFolderFromGroup = `-- name: RemoveFolderFromGroup :exec
DELETE FROM group_folders 
WHERE group_id = $1 AND folder_id = $2
`

type RemoveFolderFromGroupParams struct {
	GroupID  int64 `json:"group_id"`
	FolderID int64 `json:"folder_id"`
}

func (q *Queries) RemoveFolderFromGroup(ctx context.Context, arg RemoveFolderFromGroupParams) error {
	_, err := q.db.Exec(ctx, removeFolderFromGroup, arg.GroupID, arg.FolderID)
	return err
}

const removeUserFromGroup = `-- name: RemoveUserFromGroup :exec
DELETE FROM group_users 
WHERE group_id = $1 AND user_id = $2
`

type RemoveUserFromGroupParams struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) RemoveUserFromGroup(ctx context.Context, arg RemoveUserFromGroupParams) error {
	_, err := q.db.Exec(ctx, removeUserFromGroup, arg.GroupID, arg.UserID)
	return err
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE groups 
SET name = $2, description = $3, updated_at = EXTRACT(EPOCH FROM NOW()), updated_by = $4
WHERE id = $1
RETURNING id, name, description, created_at, updated_at, created_by, updated_by
`

type UpdateGroupParams struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	UpdatedBy   string `json:"updated_by"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, updateGroup,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UpdatedBy,
	)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
