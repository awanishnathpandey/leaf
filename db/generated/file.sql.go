// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: file.sql

package generated

import (
	"context"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (name, slug, url, folder_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, slug, url, folder_id, created_at, updated_at
`

type CreateFileParams struct {
	Name     string `json:"name"`
	Slug     string `json:"slug"`
	Url      string `json:"url"`
	FolderID int64  `json:"folder_id"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, createFile,
		arg.Name,
		arg.Slug,
		arg.Url,
		arg.FolderID,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Url,
		&i.FolderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files
WHERE id = $1
`

func (q *Queries) DeleteFile(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFile, id)
	return err
}

const getFile = `-- name: GetFile :one
SELECT id, name, slug, url, folder_id, created_at, updated_at FROM files
WHERE id = $1
`

func (q *Queries) GetFile(ctx context.Context, id int64) (File, error) {
	row := q.db.QueryRow(ctx, getFile, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Url,
		&i.FolderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFilesByFolder = `-- name: GetFilesByFolder :many
SELECT id, name, slug, url, folder_id, created_at, updated_at FROM files
WHERE folder_id = $1
`

func (q *Queries) GetFilesByFolder(ctx context.Context, folderID int64) ([]File, error) {
	rows, err := q.db.Query(ctx, getFilesByFolder, folderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Url,
			&i.FolderID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilesByFolderID = `-- name: GetFilesByFolderID :many
SELECT id, name, slug, url, folder_id, created_at, updated_at FROM files
WHERE folder_id = $1
`

func (q *Queries) GetFilesByFolderID(ctx context.Context, folderID int64) ([]File, error) {
	rows, err := q.db.Query(ctx, getFilesByFolderID, folderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Url,
			&i.FolderID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFiles = `-- name: ListFiles :many
SELECT id, name, slug, url, folder_id, created_at, updated_at FROM files
ORDER BY name
`

func (q *Queries) ListFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.Query(ctx, listFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Url,
			&i.FolderID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFile = `-- name: UpdateFile :one
UPDATE files
SET name = $2, slug = $3, url = $4, updated_at = EXTRACT(EPOCH FROM NOW())
WHERE id = $1
RETURNING id, name, slug, url, folder_id, created_at, updated_at
`

type UpdateFileParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Slug string `json:"slug"`
	Url  string `json:"url"`
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, updateFile,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Url,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Url,
		&i.FolderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
