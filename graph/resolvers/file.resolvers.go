package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	"github.com/awanishnathpandey/leaf/db/generated"
	"github.com/awanishnathpandey/leaf/graph"
	"github.com/awanishnathpandey/leaf/graph/model"
	"github.com/awanishnathpandey/leaf/internal/utils"
)

// Folder is the resolver for the folder field.
func (r *fileResolver) Folder(ctx context.Context, obj *model.File) (*model.Folder, error) {
	// Fetch the folder by folderID
	folder, err := r.DB.GetFolder(ctx, obj.FolderID)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch folder: %w", err)
	}

	// Map the folder data to the GraphQL model
	return &model.Folder{
		ID:          folder.ID,
		Name:        folder.Name,
		Slug:        folder.Slug,
		Description: folder.Description,
		CreatedAt:   folder.CreatedAt,
		UpdatedAt:   folder.UpdatedAt,
	}, nil
}

// Groups is the resolver for the groups field.
func (r *fileResolver) Groups(ctx context.Context, obj *model.File) ([]*model.Group, error) {
	panic(fmt.Errorf("not implemented: Groups - groups"))
}

// CreateFile is the resolver for the createFile field.
func (r *mutationResolver) CreateFile(ctx context.Context, input model.CreateFile) (*model.File, error) {
	// Validate input
	if err := input.Validate(); err != nil {
		// Call the reusable validation error formatter
		return nil, utils.FormatValidationErrors(err)
	}

	// Call the sqlc generated query to insert the file into the database
	file, err := r.DB.CreateFile(ctx, generated.CreateFileParams{
		Name:     input.Name,
		Slug:     input.Slug,
		Url:      input.URL,
		FolderID: input.FolderID, // Ensure the Folder ID is passed correctly
	})
	if err != nil {
		return nil, err
	}

	// Map the result from sqlc to the GraphQL model
	return &model.File{
		ID:        file.ID,
		Name:      file.Name,
		Slug:      file.Slug,
		URL:       file.Url,
		FolderID:  file.FolderID,
		CreatedAt: file.CreatedAt,
		UpdatedAt: file.UpdatedAt,
	}, nil
}

// UpdateFile is the resolver for the updateFile field.
func (r *mutationResolver) UpdateFile(ctx context.Context, input model.UpdateFile) (*model.File, error) {
	// Check if the file exists
	_, err := r.DB.GetFile(ctx, input.ID)
	if err != nil {
		return nil, fmt.Errorf("file not found: %w", err)
	}
	// Call the sqlc generated query to update the file in the database
	file, err := r.DB.UpdateFile(ctx, generated.UpdateFileParams{
		ID:   input.ID,
		Name: input.Name,
		Slug: input.Slug,
		Url:  input.URL,
	})
	if err != nil {
		return nil, err
	}

	// Map the result from sqlc to the GraphQL model
	return &model.File{
		ID:        file.ID,
		Name:      file.Name,
		Slug:      file.Slug,
		URL:       file.Url,
		FolderID:  file.FolderID,
		CreatedAt: file.CreatedAt,
		UpdatedAt: file.UpdatedAt,
	}, nil
}

// DeleteFile is the resolver for the deleteFile field.
func (r *mutationResolver) DeleteFile(ctx context.Context, id int64) (bool, error) {
	// Check if the file exists (optional)
	_, err := r.DB.GetFile(ctx, id)
	if err != nil {
		return false, fmt.Errorf("file not found: %w", err)
	}

	// Attempt to delete the file
	err = r.DB.DeleteFile(ctx, id)
	if err != nil {
		return false, fmt.Errorf("failed to delete file: %w", err)
	}
	return true, nil
}

// Files is the resolver for the files field.
func (r *queryResolver) Files(ctx context.Context) ([]*model.File, error) {
	// Fetch folders using sqlc
	rows, err := r.DB.ListFiles(ctx) // Assuming ListFolders is the sqlc query method
	if err != nil {
		return nil, err
	}

	// Map sqlc rows to GraphQL models
	var files []*model.File
	for _, row := range rows {
		files = append(files, &model.File{
			ID:        row.ID,
			Name:      row.Name,
			Slug:      row.Slug,
			URL:       row.Url,
			FolderID:  row.FolderID,
			CreatedAt: row.CreatedAt, // Or use row.CreatedAt.Time.String()
			UpdatedAt: row.UpdatedAt, // Or use row.UpdatedAt.Time.String()
		})
	}

	return files, nil
}

// GetFile is the resolver for the getFile field.
func (r *queryResolver) GetFile(ctx context.Context, id int64) (*model.File, error) {
	// Call the generated GetFile query
	file, err := r.DB.GetFile(ctx, id) // assuming input.ID is of type string
	if err != nil {
		return nil, fmt.Errorf("failed to get file: %w", err)
	}

	// Convert the SQL result to GraphQL model
	return &model.File{
		ID:        file.ID,
		Name:      file.Name,
		Slug:      file.Slug,
		URL:       file.Url,
		FolderID:  file.FolderID,
		CreatedAt: file.CreatedAt, // assuming you're using timestamptz
		UpdatedAt: file.UpdatedAt, // assuming you're using timestamptz
	}, nil
}

// GetFilesByFolder is the resolver for the getFilesByFolder field.
func (r *queryResolver) GetFilesByFolder(ctx context.Context, folderID int64) ([]*model.File, error) {
	files, err := r.DB.GetFilesByFolder(ctx, folderID)
	if err != nil {
		return nil, err
	}
	var result []*model.File
	for _, file := range files {
		result = append(result, &model.File{
			ID:        file.ID,
			Name:      file.Name,
			Slug:      file.Slug,
			URL:       file.Url,
			FolderID:  file.FolderID,
			CreatedAt: file.CreatedAt,
			UpdatedAt: file.UpdatedAt,
		})
	}
	return result, nil
}

// File returns graph.FileResolver implementation.
func (r *Resolver) File() graph.FileResolver { return &fileResolver{r} }

type fileResolver struct{ *Resolver }
