package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"os"
	"strconv"

	"github.com/awanishnathpandey/leaf/db/generated"
	"github.com/awanishnathpandey/leaf/external/mail"
	"github.com/awanishnathpandey/leaf/graph/model"
	"github.com/awanishnathpandey/leaf/internal/middleware"
	"github.com/awanishnathpandey/leaf/internal/utils"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.Register) (*model.User, error) {
	// Validate input
	if err := input.Validate(); err != nil {
		// Call the reusable validation error formatter
		return nil, utils.FormatValidationErrors(err)
	}

	// Hash the password
	hashedPassword, err := utils.HashPassword(input.Password)
	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %w", err)
	}

	// Call the generated CreateUser function with the params
	user, err := r.DB.CreateUser(ctx, generated.CreateUserParams{
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Email:     input.Email,
		Password:  hashedPassword,
	})
	if err != nil {
		return nil, err
	}

	// Return the newly created user
	return &model.User{
		ID:              user.ID,
		FirstName:       user.FirstName,
		LastName:        user.LastName,
		Email:           user.Email,
		JobTitle:        &user.JobTitle.String,
		LineOfBusiness:  &user.LineOfBusiness.String,
		LineManager:     &user.LineManager.String,
		EmailVerifiedAt: (*int64)(&user.EmailVerifiedAt.Int64),
		LastSeenAt:      user.LastSeenAt,
		CreatedAt:       user.CreatedAt,
		UpdatedAt:       user.UpdatedAt,
		DeletedAt:       (*int64)(&user.DeletedAt.Int64),
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (*model.LoginResponse, error) {
	user, err := r.DB.GetUserByEmail(ctx, input.Email)
	if err != nil {
		return nil, fmt.Errorf("user not found: %w", err)
	}

	if err := utils.CheckPassword(user.Password, input.Password); err != nil {
		return nil, fmt.Errorf("invalid credentials")
	}
	accessToken, err := utils.GenerateJWT(user.ID, user.Email, user.FirstName, user.LastName)
	if err != nil {
		return nil, fmt.Errorf("failed to generate access token")
	}
	jwtExpiryMinutes, err := strconv.Atoi(os.Getenv("JWT_EXPIRY_MINUTES"))
	if err != nil {
		return nil, fmt.Errorf("JWT_EXPIRY_MINUTES is invalid: %v", err)
	}

	refreshToken, err := utils.GenerateJWTRefresh(user.ID, user.Email)
	if err != nil {
		return nil, fmt.Errorf("failed to generate refresh token")
	}

	// Return the token and user in the response
	loginResponse := &model.LoginResponse{
		AccessToken:  accessToken,
		RefreshToken: refreshToken,
		ExpiresIn:    int64(jwtExpiryMinutes) * 60,
		User: &model.AuthUser{
			ID:             user.ID,
			FirstName:      user.FirstName,
			LastName:       user.LastName,
			Email:          user.Email,
			JobTitle:       &user.JobTitle.String,
			LineOfBusiness: &user.LineOfBusiness.String,
			LineManager:    &user.LineManager.String,
			LastSeenAt:     user.LastSeenAt,
			CreatedAt:      user.CreatedAt,
			UpdatedAt:      user.UpdatedAt,
		},
	}

	return loginResponse, nil
}

// ForgotPassword is the resolver for the forgotPassword field.
func (r *mutationResolver) ForgotPassword(ctx context.Context, input model.ForgotPassword) (bool, error) {
	user, err := r.DB.GetUserByEmail(ctx, input.Email)
	if err != nil {
		return false, fmt.Errorf("user not found: %w", err)
	}

	// Generate a reset token
	resetToken, err := utils.GeneratePasswordResetToken(user.ID)
	if err != nil {
		return false, fmt.Errorf("failed to generate reset token: %w", err)
	}

	existingPasswordReset, err := r.DB.GetPasswordResetbyUserID(ctx, user.ID)
	if err != nil && !errors.Is(err, sql.ErrNoRows) {
		// Return an error if the query fails (excluding no rows found)
		return false, fmt.Errorf("failed to get password reset: %w", err)
	}

	if existingPasswordReset.ID != 0 {
		// If an entry exists, delete it
		err = r.DB.DeletePasswordResetbyUserID(ctx, user.ID)
		if err != nil {
			return false, fmt.Errorf("failed to delete existing password reset: %w", err)
		}
	}

	// Create a new password reset entry
	newPasswordReset, err := r.DB.CreatePasswordReset(ctx, generated.CreatePasswordResetParams{
		UserID:     user.ID,
		ResetToken: resetToken,
		CreatedBy:  user.Email,
	})

	if err != nil {
		return false, fmt.Errorf("failed to store reset token: %w", err)
	}
	// Fetch the template from the database
	templateData, err := r.DB.GetEmailTemplateByName(ctx, "password_reset")
	if err != nil {
		return false, fmt.Errorf("failed to fetch template: %w", err)
	}

	mailData, err := mail.ConvertMailData(templateData.MailData)
	if err != nil {
		return false, fmt.Errorf("failed to convert mail data: %w", err)
	}
	// mailData is already of type map[string]interface{}
	if mailData != nil {
		// Update the name and email fields in the map
		mailData["Name"] = user.FirstName // Replace with the new name
		mailData["Email"] = user.Email    // Replace with the new email
		mailData["ResetToken"] = newPasswordReset.ResetToken
	} else {
		return false, fmt.Errorf("mailData is nil")
	}
	mailTo := []string{user.Email}

	// Step 3: Render the template with provided data
	renderedTemplate, err := mail.RenderTemplate(templateData.Content, mailData)
	if err != nil {
		return false, fmt.Errorf("failed to render template: %w", err)
	}

	mailSubject := "Your Password Reset Token"

	// Step 4: Send the email with the rendered template
	err = r.MailService.SendEmail(mailTo, templateData.MailCc, templateData.MailBcc, mailSubject, renderedTemplate, mailData)
	if err != nil {
		return false, fmt.Errorf("failed to send email: %w", err)
	}

	return true, nil
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, input model.ResetPassword) (bool, error) {
	user, err := r.DB.GetUserByEmail(ctx, input.Email)
	if err != nil {
		return false, fmt.Errorf("user not found: %w", err)
	}

	// Fetch the existing password reset entry
	existingPasswordReset, err := r.DB.GetPasswordResetbyUserID(ctx, user.ID)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return false, fmt.Errorf("no password reset entry found")
		}
		return false, fmt.Errorf("failed to retrieve password reset entry: %w", err)
	}

	// Validate the reset token
	if existingPasswordReset.ResetToken != input.ResetToken {
		return false, fmt.Errorf("invalid reset token")
	}

	// Hash the new password
	hashedPassword, err := utils.HashPassword(input.NewPassword)
	if err != nil {
		return false, fmt.Errorf("failed to hash password: %w", err)
	}
	// Update the user's password
	err = r.DB.UpdateUserPassword(ctx, generated.UpdateUserPasswordParams{
		Email:    user.Email,
		Password: hashedPassword,
	})
	if err != nil {
		return false, fmt.Errorf("failed to update password: %w", err)
	}
	// Delete the password reset entry
	err = r.DB.DeletePasswordResetbyUserID(ctx, user.ID)
	if err != nil {
		return false, fmt.Errorf("failed to delete password reset: %w", err)
	}
	return true, nil
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, input model.ChangePassword) (bool, error) {
	if input.NewPassword == "" || input.OldPassword == "" {
		return false, fmt.Errorf("password cannot be empty")
	}
	// Retrieve userID from context
	// userID := ctx.Value("userID").(int64) // Access the user ID from the context
	userEmail := ctx.Value("userEmail").(string)

	// Fetch user from DB based on the userID
	user, err := r.DB.GetUserByEmail(ctx, userEmail)
	if err != nil {
		return false, fmt.Errorf("user not found: %w", err)
	}
	// Validate the old password
	if err := utils.CheckPassword(user.Password, input.OldPassword); err != nil {
		return false, fmt.Errorf("incorrect old password")
	}

	// Hash the new password
	hashedPassword, err := utils.HashPassword(input.NewPassword)
	if err != nil {
		return false, fmt.Errorf("failed to hash password: %w", err)
	}
	// Update the user's password
	err = r.DB.UpdateUserPassword(ctx, generated.UpdateUserPasswordParams{
		Email:    user.Email,
		Password: hashedPassword,
	})
	if err != nil {
		return false, fmt.Errorf("failed to update password: %w", err)
	}

	return true, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input *model.RefreshToken) (*model.LoginResponse, error) {
	claims, err := utils.VerifyJWTRefresh(input.RefreshToken)
	if err != nil {
		return nil, errors.New("invalid or expired refresh token")
	}
	user, err := r.DB.GetUserByEmail(ctx, claims.Email)
	if err != nil {
		return nil, fmt.Errorf("user not found: %w", err)
	}
	accessToken, err := utils.GenerateJWT(user.ID, user.Email, user.FirstName, user.LastName)
	if err != nil {
		return nil, fmt.Errorf("failed to generate access token")
	}
	jwtExpiryMinutes, err := strconv.Atoi(os.Getenv("JWT_EXPIRY_MINUTES"))
	if err != nil {
		return nil, fmt.Errorf("JWT_EXPIRY_MINUTES is invalid: %v", err)
	}

	refreshToken, err := utils.GenerateJWTRefresh(user.ID, user.Email)
	if err != nil {
		return nil, fmt.Errorf("failed to generate refresh token")
	}

	// Return the token and user in the response
	loginResponse := &model.LoginResponse{
		AccessToken:  accessToken,
		RefreshToken: refreshToken,
		ExpiresIn:    int64(jwtExpiryMinutes) * 60,
		User: &model.AuthUser{
			ID:             user.ID,
			FirstName:      user.FirstName,
			LastName:       user.LastName,
			Email:          user.Email,
			JobTitle:       &user.JobTitle.String,
			LineOfBusiness: &user.LineOfBusiness.String,
			LineManager:    &user.LineManager.String,
			LastSeenAt:     user.LastSeenAt,
			CreatedAt:      user.CreatedAt,
			UpdatedAt:      user.UpdatedAt,
		},
	}

	return loginResponse, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	// Retrieve userID from context
	// userID := ctx.Value("userID").(int64) // Access the user ID from the context
	// Safely retrieve values from the context with error handling
	userEmail := ctx.Value("userEmail").(string)
	logEntry := middleware.AuditLogEntry{
		TableName:   "users",
		Description: "Fetched auth user details",
		Action:      "READ",
		RecordKey:   userEmail,
	}

	// Call the insertAuditLog function and pass the context along
	err := middleware.InsertAuditLog(ctx, logEntry)
	if err != nil {
		return nil, fmt.Errorf("failed to insert audit log: %v", err)
	}

	// Fetch user from DB based on the userID
	user, err := r.DB.GetUserByEmail(ctx, userEmail)
	if err != nil {
		return nil, fmt.Errorf("user not found: %w", err)
	}

	// Map the generated.User to model.User
	modelUser := &model.User{
		ID:             user.ID, // Assuming both have the same field names
		FirstName:      user.FirstName,
		LastName:       user.LastName,
		Email:          user.Email,
		JobTitle:       &user.JobTitle.String,
		LineOfBusiness: &user.LineOfBusiness.String,
		LineManager:    &user.LineManager.String,
		LastSeenAt:     user.LastSeenAt,
		CreatedAt:      user.CreatedAt,
		UpdatedAt:      user.UpdatedAt,
	}

	return modelUser, nil
}

// GetMyFilesAndFolders is the resolver for the getMyFilesAndFolders field.
func (r *queryResolver) GetMyFilesAndFolders(ctx context.Context) ([]*model.MyFolder, error) {
	// Define the required permissions for this action
	requiredPermissions := []string{"all", "read"}

	// Check if the user has the required permissions
	if err := middleware.CheckUserPermissions(ctx, requiredPermissions, r.DB); err != nil {
		return nil, err
	}

	// Fetch all folders and files associated with the user and filtered by file type
	userID, ok := ctx.Value("userID").(int64) // Ensure correct type assertion
	if !ok {
		return nil, fmt.Errorf("invalid userID in context")
	}

	rows, err := r.DB.GetFilesAndFoldersByUser(ctx, generated.GetFilesAndFoldersByUserParams{
		UserID:   userID,
		FileType: "document",
	})
	if err != nil {
		return nil, fmt.Errorf("error fetching files and folders: %w", err)
	}

	// Assuming `rows` contains the data from the query
	folderMap := make(map[int64]*model.MyFolder)

	for _, row := range rows {
		// Ensure that folder is added only once
		folder, exists := folderMap[row.FolderID]
		if !exists {
			folder = &model.MyFolder{
				ID:          row.FolderID,
				Name:        row.FolderName,
				Slug:        row.FolderSlug,
				Description: row.FolderDescription,
				CreatedAt:   row.FolderCreatedAt,
				UpdatedAt:   row.FolderUpdatedAt,
			}
			folderMap[row.FolderID] = folder
		}

		// Ensure files are added only once per folder by checking for file uniqueness
		fileExists := false
		for _, existingFile := range folder.MyFiles {
			if existingFile.ID == row.FileID {
				fileExists = true
				break
			}
		}

		if !fileExists {
			folder.MyFiles = append(folder.MyFiles, &model.MyFile{
				ID:           row.FileID,
				Name:         row.FileName,
				Slug:         row.FileSlug,
				FilePath:     row.FilePath,
				FileType:     row.FileType,
				FileBytes:    row.FileBytes,
				FolderID:     row.FileFolderID,
				AutoDownload: row.FileAutoDownload,
				CreatedAt:    row.FileCreatedAt,
				UpdatedAt:    row.FileUpdatedAt,
			})
		}
	}

	// Convert map to slice
	var folders []*model.MyFolder
	for _, folder := range folderMap {
		folders = append(folders, folder)
	}

	// Add logic to set `isNew` for each file and `hasNewFile` for each folder
	for i := range folders {
		hasNewFile := false
		for j := range folders[i].MyFiles {
			// Check if file is new and set the flag
			if utils.IsFileNew(folders[i].MyFiles[j].UpdatedAt, 7) { // 7 days
				folders[i].MyFiles[j].IsNew = true
				hasNewFile = true
			}
		}
		// Set the folder's `hasNewFile` flag based on its files
		folders[i].HasNewFile = hasNewFile
	}

	return folders, nil
}

// GetMyVideos is the resolver for the getMyVideos field.
func (r *queryResolver) GetMyVideos(ctx context.Context) ([]*model.MyFile, error) {
	panic(fmt.Errorf("not implemented: GetMyVideos - getMyVideos"))
}

// GetMySupportDocuments is the resolver for the getMySupportDocuments field.
func (r *queryResolver) GetMySupportDocuments(ctx context.Context) ([]*model.MyFile, error) {
	panic(fmt.Errorf("not implemented: GetMySupportDocuments - getMySupportDocuments"))
}
