// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateFolder struct {
	Name        string `json:"name"`
	Slug        string `json:"slug"`
	Description string `json:"description"`
}

type CreateUser struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type FileConnection struct {
	Edges    []*FileEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type FileEdge struct {
	Cursor string `json:"cursor"`
	Node   *File  `json:"node"`
}

type FileFilter struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

type FileSort struct {
	Field FileSortField `json:"field"`
	Order SortOrder     `json:"order"`
}

type Folder struct {
	ID          int64    `json:"id"`
	Name        string   `json:"name"`
	Slug        string   `json:"slug"`
	Description string   `json:"description"`
	CreatedAt   int64    `json:"createdAt"`
	UpdatedAt   int64    `json:"updatedAt"`
	Groups      []*Group `json:"groups"`
	Files       []*File  `json:"files"`
}

type FolderConnection struct {
	Edges    []*FolderEdge `json:"edges"`
	PageInfo *PageInfo     `json:"pageInfo"`
}

type FolderEdge struct {
	Cursor string  `json:"cursor"`
	Node   *Folder `json:"node"`
}

type FolderFilter struct {
	Name        *string `json:"name,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	Description *string `json:"description,omitempty"`
}

type FolderSort struct {
	Field FolderSortField `json:"field"`
	Order SortOrder       `json:"order"`
}

type Mutation struct {
}

type PageInfo struct {
	HasNextPage     bool `json:"hasNextPage"`
	HasPreviousPage bool `json:"hasPreviousPage"`
}

type Query struct {
}

type UpdateFolder struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Slug        string `json:"slug"`
	Description string `json:"description"`
}

type UpdateUser struct {
	ID    int64  `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

type User struct {
	ID              int64    `json:"id"`
	Name            string   `json:"name"`
	Email           string   `json:"email"`
	Password        string   `json:"password"`
	EmailVerifiedAt *int64   `json:"emailVerifiedAt,omitempty"`
	LastSeenAt      int64    `json:"lastSeenAt"`
	CreatedAt       int64    `json:"createdAt"`
	UpdatedAt       int64    `json:"updatedAt"`
	DeletedAt       *int64   `json:"deletedAt,omitempty"`
	Groups          []*Group `json:"groups"`
	Roles           []*Role  `json:"roles"`
}

type UserConnection struct {
	Edges    []*UserEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node"`
}

type UserFilter struct {
	Name  *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
}

type UserSort struct {
	Field UserSortField `json:"field"`
	Order SortOrder     `json:"order"`
}

type FileSortField string

const (
	FileSortFieldName FileSortField = "NAME"
	FileSortFieldSlug FileSortField = "SLUG"
)

var AllFileSortField = []FileSortField{
	FileSortFieldName,
	FileSortFieldSlug,
}

func (e FileSortField) IsValid() bool {
	switch e {
	case FileSortFieldName, FileSortFieldSlug:
		return true
	}
	return false
}

func (e FileSortField) String() string {
	return string(e)
}

func (e *FileSortField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileSortField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileSortField", str)
	}
	return nil
}

func (e FileSortField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FolderSortField string

const (
	FolderSortFieldName        FolderSortField = "NAME"
	FolderSortFieldSlug        FolderSortField = "SLUG"
	FolderSortFieldDescription FolderSortField = "DESCRIPTION"
)

var AllFolderSortField = []FolderSortField{
	FolderSortFieldName,
	FolderSortFieldSlug,
	FolderSortFieldDescription,
}

func (e FolderSortField) IsValid() bool {
	switch e {
	case FolderSortFieldName, FolderSortFieldSlug, FolderSortFieldDescription:
		return true
	}
	return false
}

func (e FolderSortField) String() string {
	return string(e)
}

func (e *FolderSortField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FolderSortField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FolderSortField", str)
	}
	return nil
}

func (e FolderSortField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "ASC"
	SortOrderDesc SortOrder = "DESC"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserSortField string

const (
	UserSortFieldName  UserSortField = "NAME"
	UserSortFieldEmail UserSortField = "EMAIL"
)

var AllUserSortField = []UserSortField{
	UserSortFieldName,
	UserSortFieldEmail,
}

func (e UserSortField) IsValid() bool {
	switch e {
	case UserSortFieldName, UserSortFieldEmail:
		return true
	}
	return false
}

func (e UserSortField) String() string {
	return string(e)
}

func (e *UserSortField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserSortField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserSortField", str)
	}
	return nil
}

func (e UserSortField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
